import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as s,a}from"./app-61bbac31.js";const r="/assets/1289934-20190621232209365-1000366002-7b76eb24.png",t="/assets/1289934-20190621233618769-504231907-7b2681e1.png",n="/assets/1289934-20190622001013515-677922001-35a00e16.png",l="/assets/1289934-20190622000959260-539243592-e924be77.png",o={},d=a('<h1 id="redis-基础" tabindex="-1"><a class="header-anchor" href="#redis-基础" aria-hidden="true">#</a> Redis 基础</h1><h2 id="redis常见的数据结构" tabindex="-1"><a class="header-anchor" href="#redis常见的数据结构" aria-hidden="true">#</a> Redis常见的数据结构？</h2><p>String、Hash、List、Set、SortedSet。</p><h3 id="_1-string-字符串类型" tabindex="-1"><a class="header-anchor" href="#_1-string-字符串类型" aria-hidden="true">#</a> 1.String 字符串类型</h3><p>是redis中最基本的数据类型，一个key对应一个value。</p><p>String类型是二进制安全的，意思是 redis 的 string 可以包含任何数据。如数字，字符串，jpg图片或者序列化的对象。</p><p><strong>实战场景：</strong></p><ol><li>缓存： 经典使用场景，把常用信息，字符串，图片或者视频等信息放到redis中，redis作为缓存层，mysql做持久化层，降低mysql的读写压力。</li><li>计数器：redis是单线程模型，一个命令执行完才会执行下一个，同时数据可以一步落地到其他的数据源。</li><li>session：常见方案spring session + redis实现session共享</li></ol><h3 id="_2-hash-哈希" tabindex="-1"><a class="header-anchor" href="#_2-hash-哈希" aria-hidden="true">#</a> 2.Hash （哈希）</h3><p>是一个Mapmap，指值本身又是一种键值对结构，如 <code>value={{field1,value1},......fieldN,valueN}}</code></p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>实战场景：</strong></p><p>1.缓存： 能直观，相比string更节省空间，的维护缓存信息，如用户信息，视频信息等。</p><h3 id="_3-链表" tabindex="-1"><a class="header-anchor" href="#_3-链表" aria-hidden="true">#</a> 3.链表</h3><p>List 说白了就是链表（redis 使用双端链表实现的 List），是有序的，value可以重复，可以通过下标取出对应的value值，左右两边都能进行插入和删除数据。</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用列表的技巧</p><ul><li>lpush+lpop=Stack(栈)</li><li>lpush+rpop=Queue（队列）</li><li>lpush+ltrim=Capped Collection（有限集合）</li><li>lpush+brpop=Message Queue（消息队列）</li></ul><p><strong>实战场景：</strong></p><p>1.timeline：例如微博的时间轴，有人发布微博，用lpush加入时间轴，展示新的列表信息。</p><h3 id="_4-set-集合" tabindex="-1"><a class="header-anchor" href="#_4-set-集合" aria-hidden="true">#</a> 4.Set 集合</h3><p>集合类型也是用来保存多个字符串的元素，但和列表不同的是集合中 1. 不允许有重复的元素，2.集合中的元素是无序的，不能通过索引下标获取元素，3.支持集合间的操作，可以取多个集合取交集、并集、差集。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>实战场景;</strong></p><ol><li>标签（tag）,给用户添加标签，或者用户给消息添加标签，这样有同一标签或者类似标签的可以给推荐关注的事或者关注的人。</li><li>点赞，或点踩，收藏等，可以放到set中实现</li></ol><h3 id="_5-zset-有序集合" tabindex="-1"><a class="header-anchor" href="#_5-zset-有序集合" aria-hidden="true">#</a> 5.zset 有序集合</h3><p>有序集合和集合有着必然的联系，保留了集合不能有重复成员的特性，区别是，有序集合中的元素是可以排序的，它给每个元素设置一个分数，作为排序的依据。</p><p>（有序集合中的元素不可以重复，但是score 分数 可以重复，就和一个班里的同学学号不能重复，但考试成绩可以相同）。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>实战场景：</strong></p><ol><li>排行榜：有序集合经典使用场景。例如小说视频等网站需要对用户上传的小说视频做排行榜，榜单可以按照用户关注数，更新时间，字数等打分，做排行。</li></ol>',31),p=[d];function h(c,g){return i(),s("div",null,p)}const f=e(o,[["render",h],["__file","redis-basic.html.vue"]]);export{f as default};
