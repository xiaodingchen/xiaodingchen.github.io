import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,b as n,d as s,e as t,a as l}from"./app-5c6114be.js";const i={},u=l(`<h1 id="http包的内存泄漏" tabindex="-1"><a class="header-anchor" href="#http包的内存泄漏" aria-hidden="true">#</a> http包的内存泄漏</h1><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;io/ioutil&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;runtime&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	num <span class="token operator">:=</span> <span class="token number">6</span>
	<span class="token keyword">for</span> index <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> index<span class="token operator">++</span> <span class="token punctuation">{</span>
		resp<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">)</span>
		<span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;此时goroutine个数= %d\\n&quot;</span><span class="token punctuation">,</span> runtime<span class="token punctuation">.</span><span class="token function">NumGoroutine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这道题在不执行<code>resp.Body.Close()</code>的情况下，泄漏了吗？如果泄漏，泄漏了多少个goroutine?</p><h2 id="怎么答" tabindex="-1"><a class="header-anchor" href="#怎么答" aria-hidden="true">#</a> 怎么答</h2><p>不进行resp.Body.Close()，泄漏是一定的。但是泄漏的goroutine个数就让我迷糊了。由于执行了6遍，每次泄漏一个读和写goroutine，就是12个goroutine，加上main函数本身也是一个goroutine，所以答案是13.<br> 然而执行程序，发现答案是3，出入有点大，为什么呢？</p><h2 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> 解释</h2><p>我们直接看源码。golang 的 http 包。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">--</span> DefaultClient<span class="token punctuation">.</span>Get
<span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">do</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">func</span> <span class="token function">send</span><span class="token punctuation">(</span>ireq <span class="token operator">*</span>Request<span class="token punctuation">,</span> rt RoundTripper<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> resp<span class="token punctuation">,</span> didTimeout<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">transport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deadline<span class="token punctuation">)</span> 
<span class="token comment">// 以上代码在 go/1.12.7/libexec/src/net/http/client:174 </span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">transport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> RoundTripper <span class="token punctuation">{</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>Transport <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> c<span class="token punctuation">.</span>Transport
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> DefaultTransport
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>说明 <code>http.Get</code> 默认使用 <code>DefaultTransport</code> 管理连接。</li></ul><p>DefaultTransport 是干嘛的呢？</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// It establishes network connections as needed</span>
<span class="token comment">// and caches them for reuse by subsequent calls.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>DefaultTransport</code> 的作用是根据需要建立网络连接并缓存它们以供后续调用重用。</li></ul><p>那么 <code>DefaultTransport</code> 什么时候会建立连接呢？</p><p>接着上面的代码堆栈往下翻</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">send</span><span class="token punctuation">(</span>ireq <span class="token operator">*</span>Request<span class="token punctuation">,</span> rt RoundTripper<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> 
<span class="token operator">--</span>resp<span class="token punctuation">,</span> err <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">RoundTrip</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token comment">// 以上代码在 go/1.12.7/libexec/src/net/http/client:250</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">RoundTrip</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">roundTrip</span><span class="token punctuation">(</span>req <span class="token operator">*</span>Request<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">getConn</span><span class="token punctuation">(</span>treq <span class="token operator">*</span>transportRequest<span class="token punctuation">,</span> cm connectMethod<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">dialConn</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> cm connectMethod<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>persistConn<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
	<span class="token keyword">go</span> pconn<span class="token punctuation">.</span><span class="token function">readLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 启动一个读goroutine</span>
	<span class="token keyword">go</span> pconn<span class="token punctuation">.</span><span class="token function">writeLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 启动一个写goroutine</span>
	<span class="token keyword">return</span> pconn<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>一次建立连接，就会启动一个读goroutine和写goroutine。这就是为什么一次<code>http.Get()</code>会泄漏两个goroutine的来源。</li><li>泄漏的来源知道了，也知道是因为没有执行close</li></ul><p><strong>那为什么不执行 close 会泄漏呢？</strong></p><p>回到刚刚启动的读goroutine 的 <code>readLoop()</code> 代码里</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>pc <span class="token operator">*</span>persistConn<span class="token punctuation">)</span> <span class="token function">readLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	alive <span class="token operator">:=</span> <span class="token boolean">true</span>
	<span class="token keyword">for</span> alive <span class="token punctuation">{</span>
        <span class="token operator">...</span>
		<span class="token comment">// Before looping back to the top of this function and peeking on</span>
		<span class="token comment">// the bufio.Reader, wait for the caller goroutine to finish</span>
		<span class="token comment">// reading the response body. (or for cancelation or death)</span>
		<span class="token keyword">select</span> <span class="token punctuation">{</span>
		<span class="token keyword">case</span> bodyEOF <span class="token operator">:=</span> <span class="token operator">&lt;-</span>waitForBodyRead<span class="token punctuation">:</span>
			pc<span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">setReqCanceler</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>req<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// before pc might return to idle pool</span>
			alive <span class="token operator">=</span> alive <span class="token operator">&amp;&amp;</span>
				bodyEOF <span class="token operator">&amp;&amp;</span>
				<span class="token operator">!</span>pc<span class="token punctuation">.</span>sawEOF <span class="token operator">&amp;&amp;</span>
				pc<span class="token punctuation">.</span><span class="token function">wroteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
				<span class="token function">tryPutIdleConn</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span>
			<span class="token keyword">if</span> bodyEOF <span class="token punctuation">{</span>
				eofc <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>rc<span class="token punctuation">.</span>req<span class="token punctuation">.</span>Cancel<span class="token punctuation">:</span>
			alive <span class="token operator">=</span> <span class="token boolean">false</span>
			pc<span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">CancelRequest</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>req<span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>rc<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
			alive <span class="token operator">=</span> <span class="token boolean">false</span>
			pc<span class="token punctuation">.</span>t<span class="token punctuation">.</span><span class="token function">cancelRequest</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>req<span class="token punctuation">,</span> rc<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>pc<span class="token punctuation">.</span>closech<span class="token punctuation">:</span>
			alive <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
        <span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中第一个 body 被读取完或关闭这个 case:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>alive <span class="token operator">=</span> alive <span class="token operator">&amp;&amp;</span>
    bodyEOF <span class="token operator">&amp;&amp;</span>
    <span class="token operator">!</span>pc<span class="token punctuation">.</span>sawEOF <span class="token operator">&amp;&amp;</span>
    pc<span class="token punctuation">.</span><span class="token function">wroteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token function">tryPutIdleConn</span><span class="token punctuation">(</span>trace<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bodyEOF 来源于到一个通道 waitForBodyRead，这个字段的 true 和 false 直接决定了 alive 变量的值（alive=true那读goroutine继续活着，循环，否则退出goroutine）。</p><p><strong>那么这个通道的值是从哪里过来的呢？</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// go/1.12.7/libexec/src/net/http/transport.go: 1758</span>
		body <span class="token operator">:=</span> <span class="token operator">&amp;</span>bodyEOFSignal<span class="token punctuation">{</span>
			body<span class="token punctuation">:</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">,</span>
			earlyCloseFn<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
				waitForBodyRead <span class="token operator">&lt;-</span> <span class="token boolean">false</span>
				<span class="token operator">&lt;-</span>eofc <span class="token comment">// will be closed by deferred call at the end of the function</span>
				<span class="token keyword">return</span> <span class="token boolean">nil</span>

			<span class="token punctuation">}</span><span class="token punctuation">,</span>
			fn<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
				isEOF <span class="token operator">:=</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF
				waitForBodyRead <span class="token operator">&lt;-</span> isEOF
				<span class="token keyword">if</span> isEOF <span class="token punctuation">{</span>
					<span class="token operator">&lt;-</span>eofc <span class="token comment">// see comment above eofc declaration</span>
				<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
					<span class="token keyword">if</span> cerr <span class="token operator">:=</span> pc<span class="token punctuation">.</span><span class="token function">canceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cerr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
						<span class="token keyword">return</span> cerr
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">return</span> err
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果执行 earlyCloseFn ，waitForBodyRead 通道输入的是 false，alive 也会是 false，那 readLoop() 这个 goroutine 就会退出。</li><li>如果执行 fn ，其中包括正常情况下 body 读完数据抛出 io.EOF 时的 case，waitForBodyRead 通道输入的是 true，那 alive 会是 true，那么 readLoop() 这个 goroutine 就不会退出，同时还顺便执行了 tryPutIdleConn(trace) 。</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// tryPutIdleConn adds pconn to the list of idle persistent connections awaiting</span>
<span class="token comment">// a new request.</span>
<span class="token comment">// If pconn is no longer needed or not in a good state, tryPutIdleConn returns</span>
<span class="token comment">// an error explaining why it wasn&#39;t registered.</span>
<span class="token comment">// tryPutIdleConn does not close pconn. Use putOrCloseIdleConn instead for that.</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transport<span class="token punctuation">)</span> <span class="token function">tryPutIdleConn</span><span class="token punctuation">(</span>pconn <span class="token operator">*</span>persistConn<span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>tryPutIdleConn 将 pconn 添加到等待新请求的空闲持久连接列表中，也就是之前说的连接会复用。</li></ul><p>那么问题又来了，什么时候会执行这个 <code>fn</code> 和 <code>earlyCloseFn</code> 呢？</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>es <span class="token operator">*</span>bodyEOFSignal<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	es<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> es<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> es<span class="token punctuation">.</span>closed <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	es<span class="token punctuation">.</span>closed <span class="token operator">=</span> <span class="token boolean">true</span>
	<span class="token keyword">if</span> es<span class="token punctuation">.</span>earlyCloseFn <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> es<span class="token punctuation">.</span>rerr <span class="token operator">!=</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>
		<span class="token keyword">return</span> es<span class="token punctuation">.</span><span class="token function">earlyCloseFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 关闭时执行 earlyCloseFn</span>
	<span class="token punctuation">}</span>
	err <span class="token operator">:=</span> es<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> es<span class="token punctuation">.</span><span class="token function">condfn</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面这个其实就是我们比较收悉的 resp.Body.Close() ,在里面会执行 earlyCloseFn，也就是此时 readLoop() 里的 waitForBodyRead 通道输入的是 false，alive 也会是 false，那 readLoop() 这个 goroutine 就会退出，goroutine 不会泄露。</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>b<span class="token punctuation">,</span> err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token keyword">func</span> <span class="token function">ReadAll</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> 
<span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">func</span> <span class="token function">readAll</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> capacity <span class="token builtin">int64</span><span class="token punctuation">)</span> 
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Buffer<span class="token punctuation">)</span> <span class="token function">ReadFrom</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span>


<span class="token comment">// go/1.12.7/libexec/src/bytes/buffer.go:207</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>b <span class="token operator">*</span>Buffer<span class="token punctuation">)</span> <span class="token function">ReadFrom</span><span class="token punctuation">(</span>r io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span>
		m<span class="token punctuation">,</span> e <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>buf<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 看这里，是body在执行read方法</span>
		<span class="token operator">...</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这个<code>read</code>，其实就是 <code>bodyEOFSignal</code> 里的</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>es <span class="token operator">*</span>bodyEOFSignal<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	n<span class="token punctuation">,</span> err <span class="token operator">=</span> es<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token operator">...</span> 
    <span class="token comment">// 这里会有一个io.EOF的报错，意思是读完了</span>
		err <span class="token operator">=</span> es<span class="token punctuation">.</span><span class="token function">condfn</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>


<span class="token keyword">func</span> <span class="token punctuation">(</span>es <span class="token operator">*</span>bodyEOFSignal<span class="token punctuation">)</span> <span class="token function">condfn</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> es<span class="token punctuation">.</span>fn <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">}</span>
	err <span class="token operator">=</span> es<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token comment">// 这了执行了 fn</span>
	es<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token boolean">nil</span>
	<span class="token keyword">return</span> err
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面这个其实就是我们比较收悉的读取 body 里的内容。 ioutil.ReadAll() ,在读完 body 的内容时会执行 fn，也就是此时 readLoop() 里的 waitForBodyRead 通道输入的是 true，alive 也会是 true，那 readLoop() 这个 goroutine 就不会退出，goroutine 会泄露，然后执行 tryPutIdleConn(trace) 把连接放回池子里复用。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>所以结论呼之欲出了，虽然执行了 6 次循环，而且每次都没有执行 Body.Close() ,就是因为执行了ioutil.ReadAll()把内容都读出来了，连接得以复用，因此只泄漏了一个读goroutine和一个写goroutine，最后加上main goroutine，所以答案就是3个goroutine。</li><li>从另外一个角度说，正常情况下我们的代码都会执行 ioutil.ReadAll()，但如果此时忘了 resp.Body.Close()，确实会导致泄漏。但如果你调用的域名一直是同一个的话，那么只会泄漏一个 读goroutine 和一个写goroutine，这就是为什么代码明明不规范但却看不到明显内存泄漏的原因。</li><li>那么问题又来了，为什么上面要特意强调是同一个域名呢？改天，回头，以后有空再说吧。</li></ul>`,37),r=n("br",null,null,-1),d={href:"https://juejin.cn/post/6896993332019822605",target:"_blank",rel:"noopener noreferrer"},k=n("br",null,null,-1),v=n("br",null,null,-1),m=n("br",null,null,-1),b={href:"https://juejin.cn/post/6896993332019822605",target:"_blank",rel:"noopener noreferrer"},f=n("br",null,null,-1),g=n("br",null,null,-1);function y(h,w){const a=p("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("作者：9號同学"),r,s(" 链接："),n("a",d,[s("https://juejin.cn/post/6896993332019822605"),t(a)]),k,s(" 来源：掘金"),v,s(" 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])]),n("p",null,[s("作者：9號同学"),m,s(" 链接："),n("a",b,[s("https://juejin.cn/post/6896993332019822605"),t(a)]),f,s(" 来源：掘金"),g,s(" 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])])}const R=e(i,[["render",y],["__file","q021.html.vue"]]);export{R as default};
