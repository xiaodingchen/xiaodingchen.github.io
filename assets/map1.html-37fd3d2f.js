import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-f916d83f.js";const e={},p=t(`<h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h2><p>Go里的map用于存放key/value对，在其它地方常称为hash、dictionary、关联数组，这几种称呼都是对同一种数据结构的不同称呼，它们都用于将key经过hash函数处理，然后映射到value，实现一一对应的关系。</p><p>在Go中map的元素是无序的，遍历时是随机的。map是一个指针，底层是数组，所以map是引用类型。在函数中map作为参数传递时，若函数内部对map做了相关修改，函数外的map也会被修改。</p><p>通过下面的示例对map进行声明和创建</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// 声明一个map类型的变量,nil map，它将不会做任何初始化，不会指向任何数据结构</span>
m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 初始化，创建一个map</span>
m <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 空map， 初始化，创建一个map</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>len()函数用于获取map中元素的个数，即有多个少key。delete()用于删除map中的某个key。</p><p>map的key可以是任意内置的数据类型(如int)，或者其它可以通过&quot;==&quot; 进行等值比较的数据类型，如interface和指针可以。slice、数组、map、struct类型都不能作为key。map的值可以是任意对象，包括函数、指针、stuct等等。下面的示例将会展示map的相关操作</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> m <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">// 声明一个map类型的变量</span>
    m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 初始化一个map</span>
    m<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 更新一个key/value值</span>
    i<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token comment">// 获取一个key值，ok是一个bool值，用来判断key是否存在</span>
    l <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token comment">// 获取map的长度，即元素个数</span>
    <span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 删除指定的key</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m<span class="token punctuation">{</span>
    
	<span class="token punctuation">}</span> <span class="token comment">// 遍历map</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>map同slice一样都是线程不安全的数据类型，多协程操作时需要注意。</p><h2 id="struct" tabindex="-1"><a class="header-anchor" href="#struct" aria-hidden="true">#</a> struct</h2><p>struct定义结构，结构由字段(field)组成，每个field都有所属数据类型，在一个struct中，每个字段名都必须唯一。每个字段都有类型，可以是任意类型，包括内置简单数据类型、其它自定义的struct类型、当前struct类型本身、接口、函数、channel等等。声明如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
    Age <span class="token builtin">int</span>
<span class="token punctuation">}</span>
构造<span class="token keyword">struct</span>实例
<span class="token keyword">var</span> u User <span class="token comment">// 初始化一个实例</span>
<span class="token comment">// 除此之外，还可以使用new()函数或&amp;TYPE{}的方式来构造struct实例，它会为struct分配内存，为各个字段做好默认的赋0初始化。它们是等价的，都返回数据对象的指针给变量，</span>
<span class="token comment">// 实际上&amp;TYPE{}的底层会调用new()。</span>
<span class="token keyword">var</span> u <span class="token operator">*</span>User
u <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码示例我们可以看到struct实例可以是一个值也可以是一个指针。尽管一个是数据对象值，一个是指针，它们都是数据对象的实例。</p><p>在函数中我们传递一个对象的实例可以是对象的值也可以是对象的指针，Go中的参数传递其本质都是以复制的方式传递的。若对象实例中数据比较复杂，建议使用指针作为参数值进行传递。</p><p>在struct中，field除了名称和数据类型，还可以有一个tag属性。tag属性用于&quot;注释&quot;各个字段，除了reflect包，正常的程序中都无法使用这个tag属性。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> User <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Name <span class="token builtin">string</span> <span class="token string">\`json:&quot;user&quot;\`</span>
    Age <span class="token builtin">int</span> <span class="token string">\`json:&quot;age&quot;\`</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>struct中的字段可以不用给名称，这时称为匿名字段。匿名字段的名称强制和类型相同。例如：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    name <span class="token builtin">string</span>
    age <span class="token builtin">int</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> Horse <span class="token keyword">struct</span><span class="token punctuation">{</span>
	inter
    animal
    sound <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的Horse中有两个匿名段inter和animal，它的名称和类型都是inter和animal。<br> 在上面Horse中嵌套了其它的struct(如animal)。其中animal称为内部struct，Horse称为外部struct。</p><p>假如外部struct中的字段名和内部struct的字段名相同，会如何？</p><p>有以下两个名称冲突的规则：</p><ol><li>外部struct覆盖内部struct的同名字段、同名方法</li><li>同级别的struct出现同名字段、方法将报错<br> 第一个规则使得Go struct能够实现面向对象中的重写(override)，而且可以重写字段、重写方法。<br> 第二个规则使得同名属性不会出现歧义。<br> struct可以嵌套自身的特性使之在实现树和链表上更加方便。</li></ol><h3 id="struct的方法" tabindex="-1"><a class="header-anchor" href="#struct的方法" aria-hidden="true">#</a> struct的方法</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Person <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
    Age <span class="token builtin">int</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>u Person<span class="token punctuation">)</span><span class="token function">SetName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    u<span class="token punctuation">.</span>Name <span class="token operator">=</span> name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>Person<span class="token punctuation">)</span><span class="token function">SetAge</span><span class="token punctuation">(</span>age <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    u<span class="token punctuation">.</span>Age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了实例有值类型和指针类型的区别，方法也有值类型的方法和指针类型的区别 setname()方法中是值类型的receiver，setage()方法中是指针类型的receiver。它们是有区别的。</p><p>首先，setage()方法的p是一个指针类型的person实例，所以方法体中的p.age实际上等价于(*p).age。</p><p>再者，方法就是函数，Go中所有需要传值的时候，都是按值传递的，也就是拷贝一个副本。</p><p>setname()中，除了参数name string需要拷贝，receiver部分(p person)也会拷贝，而且它明确了要拷贝的对象是值类型的实例，也就是拷贝完整的person数据结构。但实例有两种类型：值类型和指针类型。(p person) 无视它们的类型，因为receiver严格规定p是一个值类型的实例。所以无论是指针类型的p1实例还是值类型的p2实例，都会拷贝整个实例对象。对于指针类型的实例p1，前面说了，在需要的时候，Go会自动解除引用，所以p1.setname() 等价于(*p1).setname()。</p><p>也就是说，只要receiver是值类型的，无论是使用值类型的实例还是指针类型的实例，都是拷贝整个底层数据结构的，方法内部访问的和修改的都是实例的副本。所以，如果有修改操作，不会影响外部原始实例。</p><p>setage()中，receiver部分(p *person)明确指定了要拷贝的对象是指针类型的实例，无论是指针类型的实例p1还是值类型的p2，都是拷贝指针。所以p2.setage()等价于(&amp;p2).setage()。</p><p>也就是说，只要receiver是指针类型的，无论是使用值类型的实例还是指针类型的实例，都是拷贝指针，方法内部访问的和修改的都是原始的实例数据结构。所以，如果有修改操作，会影响外部原始实例。</p><p>那么选择值类型的receiver还是指针类型的receiver？一般来说选择指针类型的receiver。</p><h3 id="struct的比较" tabindex="-1"><a class="header-anchor" href="#struct的比较" aria-hidden="true">#</a> struct的比较</h3><p>struct是可以比较，但同时也是不可以比较的，这个要看struct的场景。在 Go 语言中，Go 结构体有时候并不能直接比较，当其基本类型包含：slice、map、function 时，是不能比较的。若强行比较，就会导致出现例子中的直接报错的情况。而指针引用，其虽然都是 new(string)，从表象来看是一个东西，但其具体返回的地址是不一样的。</p><p>如果我们被迫无奈，被要求一定要用结构体比较怎么办？这时候可以使用反射方法 reflect.DeepEqual，如下：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v1 <span class="token operator">:=</span> Value<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;对&quot;</span><span class="token punctuation">,</span> GoodAt<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;的&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;额&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;我&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
    v2 <span class="token operator">:=</span> Value<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;对&quot;</span><span class="token punctuation">,</span> GoodAt<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;的&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;额&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;我&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token keyword">if</span> reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="interface" tabindex="-1"><a class="header-anchor" href="#interface" aria-hidden="true">#</a> interface</h2><p>接口(interface)是一种类型，用来定义行为(方法)。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>
<span class="token keyword">type</span> User <span class="token keyword">interface</span><span class="token punctuation">{</span>
    <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token function">SetName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Person <span class="token keyword">struct</span><span class="token punctuation">{</span>
    Name <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">string</span>  <span class="token punctuation">{</span>
    <span class="token keyword">return</span> p<span class="token punctuation">.</span>Name
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Person<span class="token punctuation">)</span>  <span class="token function">SetName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    p<span class="token punctuation">.</span>Name <span class="token operator">=</span> name
<span class="token punctuation">}</span>

<span class="token keyword">var</span> u User
p <span class="token operator">:=</span> <span class="token operator">&amp;</span>Person<span class="token punctuation">{</span><span class="token punctuation">}</span>
u <span class="token operator">=</span> p <span class="token comment">// 当接口实例中保存了自定义类型的实例后，就可以直接从接口上调用它所保存的实例的方法</span>
u<span class="token punctuation">.</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token string">&quot;dddd&quot;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例，Person实例实现了User接口。</p><p>接口类型是指针类型，但是它到底存放了什么东西？接口类型的数据结构是2个指针，占用2个机器字长。第一个是指针指向实例的类型信息和方法集，第二个指针就是实例的指针地址。</p><h3 id="方法集" tabindex="-1"><a class="header-anchor" href="#方法集" aria-hidden="true">#</a> 方法集</h3><p>方法集是类型的方法集合，对于非接口类型，每个类型都分两个Method Set：值类型实例是一个Method Set，指针类型的实例是另一个Method Set。两个Method Set由不同receiver类型的方法组成。</p><p>值类型的实例的Method Set只由值类型的receiver(T Type)组成</p><p>指针类型的实例的Method Set由值类型和指针类型的receiver共同组成，即(T Type)和(T *Type)</p><p>从实现接口方法的角度上看：</p><p>如果某类型实现接口的方法的receiver是(T Type)类型的，那么只有指针类型的实例T才算是实现了这个接口，因为这个方法不在值类型的实例T方法集中</p><p>如果某类型实现接口的方法的receiver是(T Type)类型的，那么值类型的实例T和指针类型的实例T都算实现了这个接口，因为这个方法既在值类型的实例T方法集中，也在指针类型的实例T方法集中</p><h3 id="空interface" tabindex="-1"><a class="header-anchor" href="#空interface" aria-hidden="true">#</a> 空interface</h3><p>空接口是指没有定义任何接口方法的接口。没有定义任何接口方法，意味着Go中的任意对象都可以实现空接口(因为没方法需要实现)，任意对象都可以保存到空接口实例变量中。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> empty_int <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// 声明一个空接口实例</span>
<span class="token keyword">var</span> i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以定义一个空接口类型的array、slice、map、struct等，这样它们就可以用来存放任意类型的对象，因为任意类型都实现了空接口。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>any <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
any<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span>
any<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span>
any<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">}</span>
<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> any <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然，通过空接口类型，Go也能像其它动态语言一样，在数据结构中存储任意类型的数据。</p><p>空接口是一种接口，它是一种指针类型的数据类型，虽然不严谨，但它确实保存了两个指针，一个是对象的类型(或iTable)，一个是对象的值。所以上面的赋值过程是让空接口any保存各个数据对象的类型和对象的值。</p><h3 id="interface类型断言和type-switch" tabindex="-1"><a class="header-anchor" href="#interface类型断言和type-switch" aria-hidden="true">#</a> interface类型断言和type-switch</h3><p>接口实例中可以存放各种实现了接口的类型实例，在有需要的时候，还可以通过ins.(Type)或ins.(*Type)的方式将接口实例ins直接转回Type类型的实例。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> i <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">30</span>
<span class="token keyword">var</span> ins <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>// 接口实例ins中保存的是int类型</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>ins <span class="token operator">=</span> i
x <span class="token operator">:=</span> ins<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// 接口转回int类型的实例i</span>
<span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>     <span class="token comment">//输出30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，接口实例转回时，接口实例中存放的是什么类型，才能转换成什么类型。同类型的值类型实例和指针类型实例不能互转，不同类型更不能互转。</p><p>在不能转换时，Golang将直接以Panic的方式终止程序。但可以处理转换失败时的panic，这时需要类型断言，也即类型检测。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 如果ins保存的是值类型的Type，则输出</span>
<span class="token keyword">if</span> t<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ins<span class="token punctuation">.</span><span class="token punctuation">(</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 如果ins保存的是指针类型的*Type，则输出</span>
<span class="token keyword">if</span> t<span class="token punctuation">,</span> ok <span class="token operator">:=</span> ins<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Type<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 一个返回值的探测</span>
t <span class="token operator">:=</span> ins<span class="token punctuation">.</span><span class="token punctuation">(</span>Type<span class="token punctuation">)</span>
t <span class="token operator">:=</span> ins<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Type<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接用<code>if v,ok := ins.(Type);ok {}</code>的方式做类型探测在探测类型数量多时不是很方便，需要重复写if结构。</p><p>Golang提供了switch...case结构用于做多种类型的探测，所以这种结构也称为type-switch。这是比较方便的语法，比如可以判断某接口如果是A类型，就执行A类型里的特有方法，如果是B类型，就执行B类型里的特有方法。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">switch</span> v <span class="token operator">:=</span> ins<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token operator">*</span>Square<span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type Square %T\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token operator">*</span>Circle<span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Type Circle %T\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;nil value: nothing to check?&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected type %T&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,66),o=[p];function c(i,l){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","map1.html.vue"]]);export{k as default};
