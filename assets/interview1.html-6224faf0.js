import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as l,b as n,d as s,e,a as t}from"./app-a3613753.js";const c={},r=t(`<p>今天面试主要和面试官讨论这些问题，我自我感觉回答的很渣。不错，我就是个技术混子，嗯，是的。</p><h2 id="php的命令模式实现" tabindex="-1"><a class="header-anchor" href="#php的命令模式实现" aria-hidden="true">#</a> PHP的命令模式实现</h2><p>PHP的命令模式也就是cli模式，就是把PHP文件当做脚本执行的一种方式。一般最简单的实现就是如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php file.php
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的列子很简单，但是这个问题不是那么简单的。通常我们在web模式下都会有个入口文件，这个入口文件叫 index.php，那么命令模式下是不是也可以有个入口文件呢？答案是可以的，比如ThinkPHP5和yii框架都实现了这个功能。比如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>php think list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面例子中，think 这个就是命令模式下的入口文件，list 是在换个文件的参数，可以通过 $SERVER[&#39;argv&#39;] 获取，获取到参数之后，执行响应的逻辑。一般的框架都会实现命令的注册，每个框架的处理机制不一样，这个可以通过阅读框架的源码看下。</p><h2 id="php的错误和异常处理" tabindex="-1"><a class="header-anchor" href="#php的错误和异常处理" aria-hidden="true">#</a> PHP的错误和异常处理</h2><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h3><p>一般编程语言都有自己的错误处理机制，这个机制对调试应用程序，处理业务逻辑有很大的帮助。 PHP提供了 error_reporting() 函数来设置错误级别。一般PHP常见的错误级别有这几种：E_ALL, E_ERROR, E_WARNING, E_NOTICE, E_STRICT, E_DEPRECATED。下面是对这几种错误级别的介绍。</p><ul><li><p>E_ERROR：致命错误，会导致脚本终止运行</p></li><li><p>E_WARNING：运行时警告 (非致命错误)。仅给出提示信息，但是脚本不会终止运行</p></li><li><p>E_NOTICE：运行时通知。表示脚本遇到可能会表现为错误的情况，但是在可以正常运行的脚本里面也可能会有类似的通知。</p></li><li><p>E_STRICT：启用 PHP 对代码的修改建议，以确保代码具有最佳的互操作性和向前兼容性。</p></li><li><p>E_DEPRECATED：运行时通知。启用后将会对在未来版本中可能无法正常工作的代码给出警告。（可忽略）</p></li><li><p>E_ALL：E_STRICT 除外的所有错误和警告信息。</p></li></ul><p>同时用户也可以设置自身的错误级别，主要通过 <code>trigger_error()</code> 函数实现。用户级别的错误有：<code>E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE, E_USER_DEPRECATED</code>。</p>`,12),u={href:"http://php.net/manual/zh/errorfunc.constants.php",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>有的时候PHP本身对错误的处理难以满足我们的业务需求，这个时候我们可以自定义一个错误处理方法来接管PHP本身的错误处理方式。我们可以通过set_error_handler(callable $error_handler [, int $error_types = E_ALL | E_STRICT ]) 函数来注册这个方法。需要注意的是要记住 error_types 里指定的错误类型都会绕过 PHP 标准错误处理程序， 除非回调函数返回了 FALSE。 error_reporting() 设置将不会起到作用而你的错误处理函数继续会被调用 —— 不过你仍然可以获取 error_reporting 的当前值，并做适当处理。 需要特别注意的是带 @ error-control operator 前缀的语句发生错误时，这个值会是 0。 以下级别的错误不能由用户定义的函数来处理： E_ERROR、 E_PARSE、 E_CORE_ERROR、 E_CORE_WARNING、 E_COMPILE_ERROR、 E_COMPILE_WARNING，和在 调用 set_error_handler() 函数所在文件中产生的大多数 E_STRICT。可在 register_shutdown_function() 中处理( 但脚本仍会结束 )</p><p><code>error_get_last()</code>获取最后发生的错误，返回了一个关联数组，描述了最后错误的信息，以该错误的 “type”、 “message”、”file” 和 “line” 为数组的键。 如果该错误由 PHP 内置函数导致的，”message”会以该函数名开头。 如果还没有错误则返回 NULL。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">Array</span>
<span class="token punctuation">(</span>
    <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token number">8</span>
    <span class="token punctuation">[</span>message<span class="token punctuation">]</span> <span class="token operator">=&gt;</span> Undefined variable<span class="token punctuation">:</span> a
    <span class="token punctuation">[</span>file<span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token constant">C</span><span class="token punctuation">:</span>\\<span class="token constant">WWW</span>\\index<span class="token operator">.</span>php
    <span class="token punctuation">[</span>line<span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token number">2</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般在做错误处理的时候这个函数会被<code>register_shutdown_function()</code>注册到脚本运行结束前。</p>`,4),k={href:"http://php.net/manual/zh/function.set-error-handler.php",target:"_blank",rel:"noopener noreferrer"},v=n("br",null,null,-1),b=n("code",null,"try...catch",-1),h={href:"http://php.net/manual/zh/class.exception.php",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>同时PHP也提供了 ErrorException 错误异常处理类，可以使用set_error_handler()函数将错误信息托管至ErrorException：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">exception_error_handler</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$errfile</span><span class="token punctuation">,</span> <span class="token variable">$errline</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ErrorException</span><span class="token punctuation">(</span><span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errfile</span><span class="token punctuation">,</span> <span class="token variable">$errline</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;exception_error_handler&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/* Trigger exception */</span>
<span class="token function">strpos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),g={href:"http://php.net/manual/zh/class.errorexception.php",target:"_blank",rel:"noopener noreferrer"},_={href:"http://php.net/manual/zh/spl.exceptions.php",target:"_blank",rel:"noopener noreferrer"},f=n("code",null,"set_exception_handler()",-1),E={href:"http://php.net/manual/zh/function.set-exception-handler.php",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>错误和异常统一处理<br> 一般在框架中都会封装一套属于框架自身的错误和异常处理模块，通常错误会被转化为异常进行统一处理。以下是简单的实现思路</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">handleExceptions</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 致命错误和语法错误</span>
        <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token class-name">E_ERROR</span> <span class="token operator">|</span> <span class="token class-name">E_USER_ERROR</span> <span class="token operator">|</span> <span class="token class-name">E_PARSE</span> <span class="token operator">|</span> <span class="token class-name">E_COMPILE_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;errorHandler&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token function">set_exception_handler</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;exceptionHandler&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取最后一次错误</span>
        <span class="token function">register_shutdown_function</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;handlerShutdown&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">errorHandler</span><span class="token punctuation">(</span><span class="token variable">$level</span><span class="token punctuation">,</span> <span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$line</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$context</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 判断错误级别是否是设置的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token variable">$level</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>ErrorException</span><span class="token punctuation">(</span><span class="token variable">$message</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$level</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$line</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">exceptionHandler</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 所有的错误和异常都在这里进行处理,一般处理错误的时候需要进行以下几点</span>
        <span class="token comment">// 1、根据错误级别记录错误日志，有利于后期排查</span>
        <span class="token comment">// 2、根据当前业务场景做出相应的动作，比如在开发模式下，就把错误全面的展现出来，如果是生产模式下就要进行优雅的错误处理。</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handlerShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$error</span> <span class="token operator">=</span> <span class="token function">error_get_last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">isFatal</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">exceptionHandler</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">fatalExceptionFromError</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">fatalExceptionFromError</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$error</span><span class="token punctuation">,</span> <span class="token variable">$traceOffset</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>ErrorException</span><span class="token punctuation">(</span>
            <span class="token variable">$error</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;message&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$error</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$error</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$error</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;line&#39;</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">isFatal</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token constant">E_ERROR</span><span class="token punctuation">,</span> <span class="token constant">E_CORE_ERROR</span><span class="token punctuation">,</span> <span class="token constant">E_COMPILE_ERROR</span><span class="token punctuation">,</span> <span class="token constant">E_PARSE</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中，我们自定义了一个处理类，这个类只对致命性错误和语法错误进行防范处理，其他的错误进行了忽略。（可重写errorHandler方法，让其对其他级别的错误进行处理）handleExceptions::exceptionHandler()方法让错误和异常都在这里进行处理。 一般处理错误的时候需要进行：</p><p>1、根据错误级别记录错误日志，有利于后期排查</p><p>2、根据当前业务场景做出相应的动作，比如在开发模式下，就把错误全面的展现出来，如果是生产模式下就要进行优雅的错误处理。（比如错误页面啊，Ajax模式下错误响应，错误恢复脚本继续执行等等）</p>`,5),y=n("code",null,"set_exception_handler",-1),x={href:"http://php.net/manual/en/class.error.php",target:"_blank",rel:"noopener noreferrer"},$={href:"http://php.net/manual/en/class.throwable.php",target:"_blank",rel:"noopener noreferrer"},P={href:"http://php.net/manual/zh/function.set-exception-handler.php",target:"_blank",rel:"noopener noreferrer"},R=t(`<h2 id="会话管理-跨域-单点登录" tabindex="-1"><a class="header-anchor" href="#会话管理-跨域-单点登录" aria-hidden="true">#</a> 会话管理，跨域，单点登录</h2><h3 id="会话管理" tabindex="-1"><a class="header-anchor" href="#会话管理" aria-hidden="true">#</a> 会话管理</h3><p>在web开发中，总是会用到会话管理。所谓会话管理指的是因为HTTP协议是无状态的一种协议，为了识别当前用户而创建的一种技术手段。会话管理主要有两个部分组成，客户端和服务器端。一般客户端指的是COOKIE，服务器端指的是SESSION。</p><p><code>Session</code>和<code>cookie</code>的关系。会话是由客户端发起请求，服务器端响应。比如用户登录，用户发起登录请求，服务器校验请求是否正确，正确的话就在服务器端生成一个唯一sessionID，然后通过HTTP协议把这个sessionID放到cookie里返回给客户端，客户端收到cookie后会在每次请求的时候带上cookie。格式如下：</p><p>Cookie: PHPSESSID=q0fm8up72q58ne1b6khf37dlos</p><p>PHP提供了很简单两个全局变量来操作<code>cookie</code>和<code>session</code>，分别是 <code>$_COOKIE</code> 和 <code>$_SESSION</code>，开发者不需要考虑sessionID的问题。PHP默认会把session存储在服务器的临时目录中，并在每次运行时进行GC操作。你可以通过配置 php.ini 文件改变它。同时你也可以通过自定义会话管理器来管理会话。自定义会话管理可以实现共享session。下面是利用 Redis 来实现 session 的存储的例子。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">sysSession</span> <span class="token keyword">implements</span> <span class="token class-name">SessionHandlerInterface</span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token variable">$client</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$exprie</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$client</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">client</span> <span class="token operator">=</span> <span class="token variable">$client</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setExprie</span><span class="token punctuation">(</span><span class="token variable">$exprie</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">exprie</span> <span class="token operator">=</span> <span class="token variable">$exprie</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">open</span><span class="token punctuation">(</span><span class="token variable">$savePath</span><span class="token punctuation">,</span> <span class="token variable">$sessionName</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">client</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">client</span><span class="token operator">-&gt;</span><span class="token function">setsetEx</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">exprie</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">destroy</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">client</span><span class="token operator">-&gt;</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">gc</span><span class="token punctuation">(</span><span class="token variable">$lifetime</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>
<span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">;</span>
<span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;ip&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;port&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;timeout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sysSession</span><span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$handler</span><span class="token operator">-&gt;</span><span class="token function">setExprie</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_set_save_handler</span><span class="token punctuation">(</span><span class="token variable">$handler</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">register_shutdown_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;session_write_close&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以把session存储到一个公共的服务器或集群中，这样就可以实现共享session了</p>`,10),q={href:"http://php.net/manual/zh/session.examples.php",target:"_blank",rel:"noopener noreferrer"},H=n("br",null,null,-1),I={href:"http://php.net/manual/zh/session.security.php",target:"_blank",rel:"noopener noreferrer"},S={href:"http://php.net/manual/zh/features.session.security.management.php",target:"_blank",rel:"noopener noreferrer"},O=n("h3",{id:"会话跨域和单点登录",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#会话跨域和单点登录","aria-hidden":"true"},"#"),s(" 会话跨域和单点登录")],-1),N={href:"http://a.domin.com",target:"_blank",rel:"noopener noreferrer"},C={href:"http://b.explame.com",target:"_blank",rel:"noopener noreferrer"},T={href:"http://a.domain.com",target:"_blank",rel:"noopener noreferrer"},z={href:"http://b.domain.com",target:"_blank",rel:"noopener noreferrer"},A={href:"http://domain.com",target:"_blank",rel:"noopener noreferrer"},L=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;TestCookie&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3600</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;domain.com&quot;</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D={href:"http://xn--PHPa-294f9g70cqa327is6hk1oel5feotcobmvra3u.domain.com",target:"_blank",rel:"noopener noreferrer"},U={href:"https://www.cnblogs.com/ywlaker/p/6113927.html",target:"_blank",rel:"noopener noreferrer"},W=n("br",null,null,-1),G=t(`<p>同样PHP有个比较好的项目叫做 UCenter，这个产品很好的实现了单点登录，可以自己动手实现下。</p><h2 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h2><p>当业务发展到一定程度之后，单台服务器就无法满足业务需求，这个时候就要考虑到使用集群方案。负载均衡是集群方案中的一种策略。负载均衡的主要作用就是根据不同的算法分发请求至服务集群中的某个节点。在PHP web开发中主要使用 Nginx或者 Apache 来做负载均衡执行者。在 Nginx 中主要采用反向代理的方式来实现负载均衡。Nginx默认采用轮询算法。同时还用 IP_hash 算法。Nginx 默认提供这两种算法，同时也支持第三方的算法。下面是这些算法的介绍。</p><ol><li>轮询算法(默认)</li></ol><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>upstream backserver { 
server 192.168.0.14; 
server 192.168.0.15; 
} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时也可以指定权重，指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>upstream backserver { 
server 192.168.0.14 weight=10; 
server 192.168.0.15 weight=10; 
} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>IP绑定 ip_hash</li></ol><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>upstream backserver { 
ip_hash; 
server 192.168.0.14:88; 
server 192.168.0.15:80; 
} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当ip hash失效时，会退化为轮询策略，因此不会有丢失流量的情况。从这个层面上说，ip hash也可以看成是轮询的升级版。</p><ol start="3"><li>fair（第三方）</li></ol><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>upstream backserver { 
server server1; 
server server2; 
fair; 
} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>url_hash（第三方）</li></ol><p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>upstream backserver { 
server squid1:3128; 
server squid2:3128; 
hash $request_uri; 
hash_method crc32; 
} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于Nginx负责均衡算法策略的选择，要根据业务场景来选择,一般选择的标准可以参考这三个指标：</p>`,19),F=n("li",null,"均衡性：是否能够将请求均匀的发送给后端",-1),V=n("li",null,"一致性：同一个key的请求，是否能落到同一台机器",-1),M=n("br",null,null,-1),j={href:"https://www.cnblogs.com/wpjamer/articles/6443332.html",target:"_blank",rel:"noopener noreferrer"},B={href:"https://blog.csdn.net/qq_27093465/article/details/78273656",target:"_blank",rel:"noopener noreferrer"},K=n("br",null,null,-1),J={href:"https://blog.csdn.net/itkingone/article/details/80365212",target:"_blank",rel:"noopener noreferrer"},Q=t(`<h2 id="秒杀活动和超卖" tabindex="-1"><a class="header-anchor" href="#秒杀活动和超卖" aria-hidden="true">#</a> 秒杀活动和超卖</h2><p>一般做程序开发都会遇到这种业务需求：秒杀活动。比如双十一的商品秒杀，某游戏的内测号等等。一般面试的时候问这个问题主要是考察候选人的综合能力。</p><h3 id="秒杀设计" tabindex="-1"><a class="header-anchor" href="#秒杀设计" aria-hidden="true">#</a> 秒杀设计</h3><p>首先考虑秒杀的场景，秒杀是指在指定时间范围内有限库存限制下的售卖行为。在时间范围内，随着请求的增加怎么保持服务的快速响应，怎么限制用户的下单行为，商品库存的增减等等都是要考虑的。我们一一分析下。</p><ol><li>高并发下的秒杀活动页面快速响应</li></ol><ul><li><p>从前端来讲可以这样搞：</p></li><li><ul><li>页面静态化：像秒杀活动页面一般都是访问比较高的，商品信息和库存都是固定的。所以把页面进行静态化处理是一种很好的方法，同时可以使用JS异步请求服务端，做一些简单的逻辑处理。比如倒计时、购买按钮禁止，库存修改、禁止重复提交和无限刷新等。</li></ul></li><li><ul><li>CDN加速：静态资源可以使用CDN加速。</li></ul></li><li><ul><li>用户限流：在某一时间段内只允许用户提交一次请求，比如可以采取IP限流</li></ul></li><li><p>后端的角度可以这样搞：</p></li><li><p>-在前端和后端服务之间增加一个中间层。一般这个中间层就是我们上文提到的负载均衡，通过负载均衡把请求分发到不同的节点。</p></li><li><p>-限制同一UserID访问频率：尽量拦截浏览器请求，在服务端控制层需要针对同一个访问uid，限制访问频率。</p></li><li><p>-业务分离:将秒杀业务系统和其他业务分离，单独放在专门用来做秒杀活动的服务器集群上。</p></li><li><p>-采用消息队列缓存请求：将大流量请求写到消息队列缓存，利用服务器根据自己的处理能力主动到消息缓存队列中抓取任务处理请求</p></li><li><p>-利用缓存应对读请求：对于读多写少业务，大部分请求是查询请求，所以可以读写分离，利用缓存分担数据库压力</p></li><li><p>-利用缓存应对写请求：缓存也是可以应对写请求的，可把数据库中的库存数据转移到Redis缓存中，所有减库存操作都在Redis中进行，然后再通过后台进程把Redis中的用户秒杀请求同步到数据库中。</p></li><li><p>-随机选取用户执行秒杀逻辑，没有选取到的用户返回秒杀失败</p></li></ul><p>我们在创建秒杀活动的时候就要把商品相关信息写入到缓存中，比如商品实际库存、秒杀限制库存，商品相关信息等。</p><p>我们可以采用Redis 最简单的key-value数据结构，用一个原子类型的变量值(AtomicInteger)作为key，把用户id作为value，库存数量便是原子变量的最大值。对于每个用户的秒杀，我们使用 RPUSH key value插入秒杀请求， 当插入的秒杀请求数达到上限时，停止所有后续插入。下面是简单样例：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// 假设商品库存有10个,key键名为 goods.store</span>
<span class="token variable">$nums</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;goods.store&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$nums</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">decr</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;goods.store&#39;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sale:1&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;uid&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例中，我们定义了几个key，分别是：goods.store(商品库存)、sale:1(秒杀队列的key)，开始的时候我们判断商品库存是否小于等于0，成立的话就说明秒杀失败，不成立的话就对商品库存进行 decr 操作并判断是否小于0，成立说明秒杀失败，不成立的话就把秒杀用户ID加入到秒杀队列中，然后去消费秒杀队列，用户在对订单付完款之后减商品数据库库存，然后把用户ID加入到秒杀购买成功队列,如果订单在一定时间内不付款就把此订单状态改为失败然后redis里的 goods.store进行 incr 操作。</p><h3 id="超卖问题" tabindex="-1"><a class="header-anchor" href="#超卖问题" aria-hidden="true">#</a> 超卖问题</h3><p>关于超卖问题，一般都是在并发下，对库存的判断出现了问题，上个例子中已经采用了原子操作，可以极大可能的避免超卖，但是会导致少卖，同时也可以使用redis的乐观锁和事务实现：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">watch</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>redis<span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">&#39;抢购失败&#39;</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">decr</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$redis</span><span class="token operator">-</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function X(Y,Z){const a=o("ExternalLinkIcon");return i(),l("div",null,[r,n("p",null,[s("上面的错误级别可以参考PHP官方文档："),n("em",null,[n("a",u,[s("http://php.net/manual/zh/errorfunc.constants.php"),e(a)])])]),d,n("p",null,[s("具体使用方法可以参考PHP官方手册："),n("em",null,[n("a",k,[s("http://php.net/manual/zh/function.set-error-handler.php"),e(a)])])]),n("p",null,[s("异常处理"),v,s(" 在PHP中采用 "),b,s(" 模式来处理异常，使用 throw关键字抛出异常。PHP的异常处理基类是 Exception，所有的异常处理类都继承它。官方手册地址："),n("a",h,[s("http://php.net/manual/zh/class.exception.php"),e(a)])]),m,n("p",null,[s("具体可参考PHP官方手册："),n("em",null,[n("a",g,[s("http://php.net/manual/zh/class.errorexception.php"),e(a)])])]),n("p",null,[s("除了上述两个标准异常之外，SPL提供了一系列标准异常。具体可参考："),n("em",null,[n("a",_,[s("http://php.net/manual/zh/spl.exceptions.php"),e(a)])])]),n("p",null,[s("PHP官方提供了 "),f,s(" 函数来帮助开发者自定义异常处理行为。手册地址："),n("a",E,[s("http://php.net/manual/zh/function.set-exception-handler.php"),e(a)])]),w,n("p",null,[s("在PHP7以上，E_ERROR的错误可以交由"),y,s("，即自定义异常来捕获。具体参考："),n("a",x,[s("http://php.net/manual/en/class.error.php"),e(a)]),s(" 和 "),n("a",$,[s("http://php.net/manual/en/class.throwable.php"),e(a)]),s(" 及 "),n("a",P,[s("http://php.net/manual/zh/function.set-exception-handler.php"),e(a)])]),R,n("p",null,[s("关于session相关知识可以阅读PHP官方手册："),n("a",q,[s("http://php.net/manual/zh/session.examples.php"),e(a)]),H,s(" 会话安全方面PHP官方手册进行了说明，地址："),n("a",I,[s("http://php.net/manual/zh/session.security.php"),e(a)]),s(" 和 "),n("a",S,[s("http://php.net/manual/zh/features.session.security.management.php"),e(a)])]),O,n("p",null,[s("有的时候我们一个网站有很多服务模块，每个模块都有一个域名，这个时候我们想实现多个域名之间的会话管理，那应该怎么办呢？首先我们要知道跨域，浏览器有一种同源策略。比如： "),n("a",N,[s("a.domin.com"),e(a)]),s(" 不能访问 "),n("a",C,[s("b.explame.com"),e(a)]),s(" 下的cookie，因为他们不同源，如果是这两个域名 "),n("a",T,[s("a.domain.com"),e(a)]),s(" 和 "),n("a",z,[s("b.domain.com"),e(a)]),s(" 呢？这两个是同源域名，都属于 "),n("a",A,[s("domain.com"),e(a)]),s("，看下列代码：")]),L,n("p",null,[n("a",D,[s("在PHP中通过上述代码就可以让a.domain.com"),e(a)]),s(" 和 b.domain.com进行cookie之间的相互传递，然后在每次请求的时候把cookie相关信息带上，服务端实现session共享，就可以实现会话的跨域了。这个解决方案是解决了主域名和子域名下的会话管理问题，如果是多个不同的域名呢，应该怎么办？这个时候我们就要考虑到单点登录了")]),n("p",null,[s("关于单点登录，可以参考这篇文章："),n("em",null,[n("a",U,[s("https://www.cnblogs.com/ywlaker/p/6113927.html"),e(a)])]),W,s(" 一般单点登录的使用场景是多系统之间。比如淘宝和天猫。淘宝和天猫是两种不同的系统，域名也不一样，但是你在淘宝上登录之后在天猫上也可以访问自己的个人中心。（所有的一切都是基于统一浏览器上）")]),G,n("ul",null,[F,V,n("li",null,[s("容灾性：当部分后端机器挂掉时，是否能够正常工作"),M,s(" 可以参考这篇文章："),n("a",j,[s("https://www.cnblogs.com/wpjamer/articles/6443332.html"),e(a)])])]),n("p",null,[s("负载均衡相关知识可参考："),n("a",B,[s("https://blog.csdn.net/qq_27093465/article/details/78273656"),e(a)]),K,s(" 关于Nginx轮询算法的解释可以看这篇文章："),n("a",J,[s("https://blog.csdn.net/itkingone/article/details/80365212"),e(a)])]),Q])}const an=p(c,[["render",X],["__file","interview1.html.vue"]]);export{an as default};
