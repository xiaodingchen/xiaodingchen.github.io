import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as t}from"./app-a3613753.js";const p={},e=t(`<h1 id="对已经关闭的的chan进行读写-会怎么样-为什么" tabindex="-1"><a class="header-anchor" href="#对已经关闭的的chan进行读写-会怎么样-为什么" aria-hidden="true">#</a> 对已经关闭的的chan进行读写，会怎么样？为什么？</h1><h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><p>对已经关闭的的 chan 进行读写，会怎么样？为什么？</p><h2 id="回答" tabindex="-1"><a class="header-anchor" href="#回答" aria-hidden="true">#</a> 回答</h2><ul><li>读已经关闭的 chan 能一直读到东西，但是读到的内容根据通道内关闭前是否有元素而不同。 <ul><li>如果 chan 关闭前，buffer 内有元素还未读 , 会正确读到 chan 内的值，且返回的第二个 bool 值（是否读成功）为 true。</li><li>如果 chan 关闭前，buffer 内有元素已经被读完，chan 内无值，接下来所有接收的值都会非阻塞直接成功，返回 channel 元素的零值，但是第二个 bool 值一直为 false。</li></ul></li><li>写已经关闭的 chan 会 panic</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><h3 id="_1-写已经关闭的-chan" tabindex="-1"><a class="header-anchor" href="#_1-写已经关闭的-chan" aria-hidden="true">#</a> 1. 写已经关闭的 chan</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    c <span class="token operator">&lt;-</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token comment">//输出结果</span>
<span class="token builtin">panic</span><span class="token punctuation">:</span> send on closed channel

goroutine <span class="token number">1</span> <span class="token punctuation">[</span>running<span class="token punctuation">]</span>
main<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>注意这个 send on closed channel，待会会提到。</li></ul><h3 id="_2-读已经关闭的-chan" tabindex="-1"><a class="header-anchor" href="#_2-读已经关闭的-chan" aria-hidden="true">#</a> 2. 读已经关闭的 chan</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main
<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;以下是数值的chan&quot;</span><span class="token punctuation">)</span>
    ci<span class="token operator">:=</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
    ci<span class="token operator">&lt;-</span><span class="token number">1</span>
    <span class="token function">close</span><span class="token punctuation">(</span>ci<span class="token punctuation">)</span>
    num<span class="token punctuation">,</span>ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ci
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;读chan的协程结束，num=%v， ok=%v\\n&quot;</span><span class="token punctuation">,</span>num<span class="token punctuation">,</span>ok<span class="token punctuation">)</span>
    num1<span class="token punctuation">,</span>ok1 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ci
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;再读chan的协程结束，num=%v， ok=%v\\n&quot;</span><span class="token punctuation">,</span>num1<span class="token punctuation">,</span>ok1<span class="token punctuation">)</span>
    num2<span class="token punctuation">,</span>ok2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ci
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;再再读chan的协程结束，num=%v， ok=%v\\n&quot;</span><span class="token punctuation">,</span>num2<span class="token punctuation">,</span>ok2<span class="token punctuation">)</span>
    
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;以下是字符串chan&quot;</span><span class="token punctuation">)</span>
    cs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
    cs <span class="token operator">&lt;-</span> <span class="token string">&quot;aaa&quot;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span>
    str<span class="token punctuation">,</span>ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> cs
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;读chan的协程结束，str=%v， ok=%v\\n&quot;</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span>ok<span class="token punctuation">)</span>
    str1<span class="token punctuation">,</span>ok1 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>cs
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;再读chan的协程结束，str=%v， ok=%v\\n&quot;</span><span class="token punctuation">,</span>str1<span class="token punctuation">,</span>ok1<span class="token punctuation">)</span>
    str2<span class="token punctuation">,</span>ok2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>cs
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;再再读chan的协程结束，str=%v， ok=%v\\n&quot;</span><span class="token punctuation">,</span>str2<span class="token punctuation">,</span>ok2<span class="token punctuation">)</span>

    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;以下是结构体chan&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">type</span> MyStruct <span class="token keyword">struct</span><span class="token punctuation">{</span>
        Name <span class="token builtin">string</span>
    <span class="token punctuation">}</span>
    cstruct <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> MyStruct<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
    cstruct <span class="token operator">&lt;-</span> MyStruct<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">&quot;haha&quot;</span><span class="token punctuation">}</span>
    <span class="token function">close</span><span class="token punctuation">(</span>cstruct<span class="token punctuation">)</span>
    stru<span class="token punctuation">,</span>ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> cstruct
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;读chan的协程结束，stru=%v， ok=%v\\n&quot;</span><span class="token punctuation">,</span>stru<span class="token punctuation">,</span>ok<span class="token punctuation">)</span>
    stru1<span class="token punctuation">,</span>ok1 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>cs
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;再读chan的协程结束，stru=%v， ok=%v\\n&quot;</span><span class="token punctuation">,</span>stru1<span class="token punctuation">,</span>ok1<span class="token punctuation">)</span>
    stru2<span class="token punctuation">,</span>ok2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>cs
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;再再读chan的协程结束，stru=%v， ok=%v\\n&quot;</span><span class="token punctuation">,</span>stru2<span class="token punctuation">,</span>ok2<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>以下是数值的chan
读chan的协程结束，num<span class="token operator">=</span><span class="token number">1</span>， <span class="token assign-left variable">ok</span><span class="token operator">=</span>true
再读chan的协程结束，num<span class="token operator">=</span><span class="token number">0</span>， <span class="token assign-left variable">ok</span><span class="token operator">=</span>false
再再读chan的协程结束，num<span class="token operator">=</span><span class="token number">0</span>， <span class="token assign-left variable">ok</span><span class="token operator">=</span>false
以下是字符串chan
读chan的协程结束，str<span class="token operator">=</span>aaa， <span class="token assign-left variable">ok</span><span class="token operator">=</span>true
再读chan的协程结束，str<span class="token operator">=</span>， <span class="token assign-left variable">ok</span><span class="token operator">=</span>false
再再读chan的协程结束，str<span class="token operator">=</span>， <span class="token assign-left variable">ok</span><span class="token operator">=</span>false
以下是结构体chan
读chan的协程结束，stru<span class="token operator">=</span><span class="token punctuation">{</span>haha<span class="token punctuation">}</span>， <span class="token assign-left variable">ok</span><span class="token operator">=</span>true
再读chan的协程结束，stru<span class="token operator">=</span>， <span class="token assign-left variable">ok</span><span class="token operator">=</span>false
再再读chan的协程结束，stru<span class="token operator">=</span>， <span class="token assign-left variable">ok</span><span class="token operator">=</span>false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多问一句" tabindex="-1"><a class="header-anchor" href="#多问一句" aria-hidden="true">#</a> 多问一句</h2><h3 id="_1-为什么写已经关闭的-chan-就会-panic-呢" tabindex="-1"><a class="header-anchor" href="#_1-为什么写已经关闭的-chan-就会-panic-呢" aria-hidden="true">#</a> 1. 为什么写已经关闭的 <code>chan</code> 就会 <code>panic</code> 呢？</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//在 src/runtime/chan.go</span>
<span class="token keyword">func</span> <span class="token function">chansend</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span>ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span>block <span class="token builtin">bool</span><span class="token punctuation">,</span>callerpc <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
    <span class="token comment">//省略其他</span>
    <span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token function">plainError</span><span class="token punctuation">(</span><span class="token string">&quot;send on closed channel&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>   
    <span class="token comment">//省略其他</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当 <code>c.closed != 0</code> 则为通道关闭，此时执行写，源码提示直接 <code>panic</code>，输出的内容就是上面提到的 <code>&quot;send on closed channel&quot;</code>。</li></ul><h3 id="_2-为什么读已关闭的-chan-会一直能读到值" tabindex="-1"><a class="header-anchor" href="#_2-为什么读已关闭的-chan-会一直能读到值" aria-hidden="true">#</a> 2. 为什么读已关闭的 chan 会一直能读到值？</h3><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">chanrecv</span><span class="token punctuation">(</span>c <span class="token operator">*</span>hchan<span class="token punctuation">,</span>ep unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span>block <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>selected<span class="token punctuation">,</span>received <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//省略部分逻辑</span>
    <span class="token function">lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
    <span class="token comment">//当chan被关闭了，而且缓存为空时</span>
    <span class="token comment">//ep 是指 val,ok := &lt;-c 里的val地址</span>
    <span class="token keyword">if</span> c<span class="token punctuation">.</span>closed <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>qcount <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> receenabled <span class="token punctuation">{</span>
            <span class="token function">raceacquire</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">raceaddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>lock<span class="token punctuation">)</span>
        <span class="token comment">//如果接受之的地址不空，那接收值将获得一个该值类型的零值</span>
        <span class="token comment">//typedmemclr 会根据类型清理响应的内存</span>
        <span class="token comment">//这就解释了上面代码为什么关闭的chan 会返回对应类型的零值</span>
        <span class="token keyword">if</span> ep <span class="token operator">!=</span> null <span class="token punctuation">{</span>
            <span class="token function">typedmemclr</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>elemtype<span class="token punctuation">,</span>ep<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>   
        <span class="token comment">//返回两个参数 selected,received</span>
        <span class="token comment">// 第二个采纳数就是 val,ok := &lt;- c 里的 ok</span>
        <span class="token comment">//也就解释了为什么读关闭的chan会一直返回false</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span>
    <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>c.closed != 0 &amp;&amp; c.qcount == 0</code> 指通道已经关闭，且缓存为空的情况下（已经读完了之前写到通道里的值）</li><li>如果接收值的地址 <code>ep</code> 不为空 <ul><li>那接收值将获得是一个该类型的零值</li><li><code>typedmemclr</code> 会根据类型清理相应地址的内存</li><li>这就解释了上面代码为什么关闭的 chan 会返回对应类型的零值</li></ul></li></ul>`,20),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","q018.html.vue"]]);export{k as default};
